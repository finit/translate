
==================================================================================

                                    Chap.2
                Date types used by the FPU and addressing modes
                        FPU使用的数据类型和寻址模式

    (Reminder: Addressing mode syntax in this document is that of the MASM
    assembler. The syntax may vary with other assemblers/compilers for the
    described addressing modes and should be modified as required.)

    (提示：本文档使用的寻址模式是MASM中的语法。这可能与其他的 汇编器/编译器 所使用
    的寻址语法有所不同，请根据需要进行修改。)


There are three general data types which can be used by the FPU: integer, floating
point and packed BCD.

FPU使用三种通用数据类型：整型，浮点型，压缩BCD(Binary Coded Decimal)。


INTEGER DATA TYPES
整型数据类型

In the context of FPU operations, integers are whole numbers, i.e. numbers which
do not contain any fractional part. All integers used in FPU instructions are also
considered as signed integers, the most significant bit being 0 for positive
values or 1 for negative values. 

在FPU的操作环境中，整数是完整的数字，也就是说，整数不包含任何小数部分。在FPU指令中
使用的所有整数都被视为是有符号的，最高有效位是0则为正值，是1则为负值。


Negative integer values are represented by taking the 2's complement of the
positive value and adding 1 (2's complements are obtained simply by inverting each
bit of the number). As a refresher, the following example would be for a decimal
value of 6235 in a 16-bit WORD. 

计算机中用补码的方法表示负整数。补码的编码方法是，用负整数的正值 按位取反后加1 。
为了方便理解，下面是一个十进制数6235在16位(word)中的表示。
(译注：2‘s complement 即负整数在计算中的表示方法，台湾和香港称为 二补数，大陆则称
补码。作者误为负整数的表示方法是，取其正值的补码加1。详见  wikipedia.org)

      0001 1000 0101 1011   185Bh   +6235d
      1110 0111 1010 0100   ---|
     +                  1   ---+==> 补码
      -------------------
      1110 0111 1010 0101   E7A5h   -6235d


Within the integer data types, three sizes of integers may be used: the 16-bit
WORD, the 32-bit DWORD, and the 64-bit QWORD, (the 8-bit byte cannot be used with
FPU instructions). The available range of values for each of those sizes is as
follows:

在整型数据类型里，可以使用3种大小：16位的WORD，32位的DWORD，以及64位的QWORD。(8位
的BYTE类型不能用于FPU指令) 各种类型数值的有效范围如下：

    WORD  range   ±(2^15-1)  or  ±32767
    DWORD range   ±(2^31-1)  or  ±2147483647
    QWORD range   ±(2^63-1)  or  ±9223372036854775807


Addressing modes of integer numbers
整型数字的寻址模式

All integer data used with FPU instructions can only be accessed through memory
locations. The actual code generated by the assembler is different for each of the
allowed integer sizes.

用于FPU指令的所有整型数据，只能通过内存获取。对于每种允许的整型大小，汇编器所产生
的代码也有所不同。


Integer values in memory can be specified by any of the acceptable addressing
modes. For example, if a memory variable (global or local) has been declared as a
WORD, the variable's name (whether it is indexed or not) is sufficient to get it
treated as the declared size. However, if CPU registers are used as pointers to
data in memory, it is imperative that the index be qualified as pointing to the
appropriate size. Examples of referring to memory data are:

内存中的整型数值可以被任何可接受的寻址模式指定。例如，如果一个内存变量(全局或局部)
被声明为WORD类型，那么这个变量的名字就被视为WORD类型。然而，如果用CPU寄存器作指针
，就必须说明索引数据的大小。访问内存数据的例子是：

    var_name            ;the value of var_name being treated according to how that
                        ;variable had been declared as a WORD, DWORD or QWORD
                        ;根据var_name声明时的类型，var_name的值被视为WORD，或DWORD
                        ;，或QWORD

    var_name[24]        ;value starting at the 24th byte of the var_name variable
                        ;according to how it had been declared
                        ;根据var_name声明时的类型，值从var_name处第24个字节开始

    var_name[ebx]       ;value starting at the EBX displacement in bytes of the
                        ;var_name variable according to the above
                        ;同上一样，值从var_name处第ebx个字节开始

    word ptr [eax]      ;informs the processor that EAX points to a 16-bit value
                        ;通知处理器EXA指向一个16位数值

    dword ptr [esi+12]  ;ESI points to an array of 32-bit values
                        ;ESI指向一个32位数值的数组

    qword ptr [edi+ebx] ;EDI or EBX points to an array of 64-bit values
                        ;EDI或EBX指向一个64位数值的数组

    dword ptr [ebp+8]   ;typical coding for pushed parameters of procedures when
                        ;coded by the assembler 
                        ;汇编时，典型的参数压栈


The CPU registers cannot be used directly as the source or destination of integer
data related to the FPU (as opposed to using them as pointers to the location of
data in memory). If the need should arise to use the actual value in one of the
CPU registers as the operand for data in an FPU instruction, the following is
suggested (the 16-bit signed value in AX being used for this example): 
